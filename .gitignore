import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
from faker import Faker
import argparse
from tqdm import tqdm
import sys

fake = Faker('ru_RU')

BANKS = ["Сбербанк", "ВТБ", "Газпромбанк", "Альфа-Банк", "Тинькофф", "Райффайзен", "Открытие", "Почта Банк"]
CITIES = ["Москва", "Санкт-Петербург", "Новосибирск", "Екатеринбург", "Казань", "Нижний Новгород"]
OPERATIONS = ["Перевод физ. лицу", "Оплата услуг", "Пополнение счета", "Снятие наличных", 
              "Оплата товаров", "Платеж за ЖКХ", "Пополнение телефона", "Международный перевод"]

def generate_clients(n_clients=1000):
    """Генерация базы клиентов"""
    clients = []
    for client_id in range(1000, 1000 + n_clients):
        reg_date = fake.date_between(start_date='-3y', end_date='today')
        cards = []
        for _ in range(random.randint(1, 3)):
            cards.append({
                'number': ' '.join([str(random.randint(1000, 9999)) for _ in range(4)]),
                'currency': random.choice(['RUB', 'USD', 'EUR']),
                'issue_date': fake.date_between(start_date=reg_date, end_date='today')
            })
        clients.append({
            'client_id': client_id,
            'name': fake.name(),
            'birth_date': fake.date_of_birth(minimum_age=18, maximum_age=80),
            'reg_date': reg_date,
            'city': random.choice(CITIES),
            'cards': cards
        })
    return clients

def generate_transactions(clients, n_transactions):
    """Генерация транзакций"""
    transactions = []
    for _ in tqdm(range(n_transactions), desc="Генерация транзакций"):
        client = random.choice(clients)
        card = random.choice(client['cards'])
        
        transaction = {
            'transaction_id': f"T{fake.unique.random_number(digits=8)}",
            'client_id': client['client_id'],
            'client_name': client['name'],
            'client_age': (datetime.now().date() - client['birth_date']).days // 365,
            'bank': random.choice(BANKS),
            'card_number': card['number'],
            'card_age': (datetime.now().date() - card['issue_date']).days,
            'currency': card['currency'],
            'amount': 0,  # Будет заполнено ниже
            'operation_type': random.choice(OPERATIONS),
            'timestamp': fake.date_time_between(start_date='-1y', end_date='now'),
            'is_fraud': False,
            'city': client['city'],
            'ip_city': client['city'] if random.random() > 0.2 else random.choice(CITIES),
            'device': random.choice(["Мобильное приложение", "Интернет-банк", "Банкомат"]),
            'status': "Успешно"
        }
        
        # Определяем сумму и фрод
        if random.random() < 0.03:  # 3% фродовых операций
            transaction['is_fraud'] = True
            transaction['amount'] = round(random.uniform(5000, 300000), 2)
        else:
            transaction['amount'] = round(random.uniform(50, 50000), 2)
            
        # Ночные и праздничные операции более рискованные
        if transaction['timestamp'].hour < 6 and random.random() < 0.1:
            transaction['is_fraud'] = True
            
        transactions.append(transaction)
    return transactions

def save_to_csv(data, filename):
    """Сохранение данных в CSV с прогресс-баром"""
    df = pd.DataFrame(data)
    
    # Добавляем дополнительные признаки
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['hour'] = df['timestamp'].dt.hour
    df['weekday'] = df['timestamp'].dt.day_name()
    df['month'] = df['timestamp'].dt.month_name()
    
    # Оптимизация типов данных
    df['is_fraud'] = df['is_fraud'].astype('int8')
    
    df.to_csv(filename, index=False, encoding='utf-8-sig')
    return df

def main():
    parser = argparse.ArgumentParser(description="Генератор банковских транзакций")
    parser.add_argument('-n', '--num-transactions', type=int, default=10000,
                      help='Количество транзакций для генерации')
    parser.add_argument('-c', '--num-clients', type=int, default=1000,
                      help='Количество клиентов для генерации')
    parser.add_argument('-o', '--output', default='bank_transactions.csv',
                      help='Имя выходного файла')
    args = parser.parse_args()
    
    print(f"Генерация {args.num_transactions} транзакций для {args.num_clients} клиентов...")
    
    try:
        clients = generate_clients(args.num_clients)
        transactions = generate_transactions(clients, args.num_transactions)
        df = save_to_csv(transactions, args.output)
        
        print(f"\nДанные успешно сохранены в {args.output}")
        print(f"\nСтатистика:")
        print(f"Всего транзакций: {len(df)}")
        print(f"Фродовых операций: {df['is_fraud'].sum()} ({df['is_fraud'].mean()*100:.2f}%)")
        print(f"Размер файла: {args.output} - {pd.DataFrame(transactions).memory_usage().sum()/1024/1024:.2f} MB")
        
    except Exception as e:
        print(f"Ошибка: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import classification_report, confusion_matrix
    import seaborn as sns
    import matplotlib.pyplot as plt

def analyze_fraud(df):
    """Анализ и ML-модель для детекции фрода"""
    #34
    df = pd.get_dummies(df, columns=['operation_type', 'city', 'device', 'weekday', 'month'])
    
    #признаки (X) переменную (y)
    X = df.drop(['is_fraud', 'transaction_id', 'timestamp', 'client_name', 'card_number'], axis=1)
    y = df['is_fraud']
    
    #Разделяем 
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    #модель
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    #Предсказания на тестовых данных
    y_pred = model.predict(X_test)
    
    #Класс
    print("\nОтчет по классификации:")
    print(classification_report(y_test, y_pred))
    
    #Матрица ошибок
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.xlabel('Предсказано')
    plt.ylabel('Истина')
    plt.title('Матрица ошибок')
    plt.show()
    
    #Влажность признаков
    feature_importance = pd.DataFrame({
        'Признак': X.columns,
        'Важность': model.feature_importances_
    }).sort_values('Важность', ascending=False)
    
    print("\nТоп-10 важных признаков:")
    print(feature_importance.head(10))
